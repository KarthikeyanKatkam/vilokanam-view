"use crate::{\n\tchain_spec,\n\tcli::{Cli, Subcommand},\n\tservice,\n};\nuse frame_benchmarking_cli::{BenchmarkCmd, SUBSTRATE_REFERENCE_HARDWARE};\nuse futures::future::TryFutureExt;\nuse sc_cli::SubstrateCli;\nuse sc_service::PartialComponents;\nuse vilokanam_runtime::{Block, EXISTENTIAL_DEPOSIT};\n\nimpl SubstrateCli for Cli {\n\tfn impl_name() -> String {\n\t\t\"Vilokanam Node\".into()\n\t}\n\n\tfn impl_version() -> String {\n\t\tenv!(\"SUBSTRATE_CLI_IMPL_VERSION\").into()\n\t}\n\n\tfn description() -> String {\n\t\tenv!(\"CARGO_PKG_DESCRIPTION\").into()\n\t}\n\n\tfn author() -> String {\n\t\tenv!(\"CARGO_PKG_AUTHORS\").into()\n\t}\n\n\tfn support_url() -> String {\n\t\t\"support.anonymous.an\".into()\n\t}\n\n\tfn copyright_start_year() -> i32 {\n\t\t2024\n\t}\n\n\tfn load_spec(&self, id: &str) -> Result<Box<dyn sc_service::ChainSpec>, String> {\n\t\tOk(match id {\n\t\t\t\"dev\" => Box::new(chain_spec::development_config()?),\n\t\t\t\"\" | \"local\" => Box::new(chain_spec::local_testnet_config()?),\n\t\t\tpath => Box::new(chain_spec::ChainSpec::from_json_file(std::path::PathBuf::from(path))?)),\n\t\t})\n\t}\n}\n\n/// Parse and run command line arguments\npub fn run() -> sc_cli::Result<()> {\n\tlet cli = Cli::from_args();\n\n\tmatch &cli.subcommand {\n\t\tSome(Subcommand::Key(cmd)) => cmd.run(&cli),\n\t\tSome(Subcommand::BuildSpec(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.sync_run(|config| cmd.run(config.chain_spec, config.network))\n\t\t},\n\t\tSome(Subcommand::CheckBlock(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.async_run(|config| {\n\t\t\t\tlet PartialComponents { client, task_manager, import_queue, .. } =\n\t\t\t\t\tservice::new_partial(&config)?;\n\t\t\t\tOk((cmd.run(client, import_queue), task_manager))\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::ExportBlocks(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.async_run(|config| {\n\t\t\t\tlet PartialComponents { client, task_manager, .. } = service::new_partial(&config)?;\n\t\t\t\tOk((cmd.run(client, config.database), task_manager))\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::ExportState(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.async_run(|config| {\n\t\t\t\tlet PartialComponents { client, task_manager, .. } = service::new_partial(&config)?;\n\t\t\t\tOk((cmd.run(client, config.chain_spec), task_manager))\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::ImportBlocks(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.async_run(|config| {\n\t\t\t\tlet PartialComponents { client, task_manager, import_queue, .. } =\n\t\t\t\t\tservice::new_partial(&config)?;\n\t\t\t\tOk((cmd.run(client, import_queue), task_manager))\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::PurgeChain(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.sync_run(|config| cmd.run(config.database))\n\t\t},\n\t\tSome(Subcommand::Revert(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.async_run(|config| {\n\t\t\t\tlet PartialComponents { client, task_manager, backend, .. } = service::new_partial(&config)?;\n\t\t\t\tlet aux_revert = Box::new(|client, _, blocks| {\n\t\t\t\t\tsc_consensus_grandpa::revert(client, blocks)?;\n\t\t\t\t\tOk(())\n\t\t\t\t});\n\t\t\t\tOk((cmd.run(client, backend, Some(aux_revert)), task_manager))\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::Benchmark(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\n\t\t\trunner.sync_run(|config| {\n\t\t\t\t// This switch needs to be in the client, since the client decides\n\t\t\t\t// which sub-commands it wants to support.\n\t\t\t\tmatch cmd {\n\t\t\t\t\tBenchmarkCmd::Pallet(cmd) => {\n\t\t\t\t\t\tif !cfg!(feature = \"runtime-benchmarks\") {\n\t\t\t\t\t\t\treturn Err(\n\t\t\t\t\t\t\t\t\"Runtime benchmarking wasn't enabled when building the node. \\\n\t\t\t\t\t\t\tYou can enable it with `--features runtime-benchmarks`.\"\n\t\t\t\t\t\t\t\t\t.into(),\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcmd.run::<Block, service::ExecutorDispatch>(config)\n\t\t\t\t\t},\n\t\t\t\t\tBenchmarkCmd::Block(cmd) => {\n\t\t\t\t\t\tlet PartialComponents { client, .. } = service::new_partial(&config)?;\n\t\t\t\t\t\tcmd.run(client)\n\t\t\t\t\t},\n\t\t\t\t\tBenchmarkCmd::Storage(cmd) => {\n\t\t\t\t\t\tlet PartialComponents { backend, client, .. } = service::new_partial(&config)?;\n\t\t\t\t\t\tlet db = backend.expose_db();\n\t\t\t\t\t\tlet storage = backend.expose_storage();\n\n\t\t\t\t\t\tcmd.run(config, client, db, storage)\n\t\t\t\t\t},\n\t\t\t\t\tBenchmarkCmd::Overhead(cmd) => {\n\t\t\t\t\t\tlet PartialComponents { client, .. } = service::new_partial(&config)?;\n\t\t\t\t\t\tlet ext_builder = frame_benchmarking_cli::ExtrinsicBuilder::new(client.clone());\n\n\t\t\t\t\t\tcmd.run(\n\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\tclient,\n\t\t\t\t\t\t\tframe_benchmarking_cli::InherentDataBuilder::new(client),\n\t\t\t\t\t\t\tVec::new(),\n\t\t\t\t\t\t\t&ext_builder,\n\t\t\t\t\t\t\tSUBSTRATE_REFERENCE_HARDWARE.clone(),\n\t\t\t\t\t\t)\n\t\t\t\t\t},\n\t\t\t\t\tBenchmarkCmd::Machine(cmd) => {\n\t\t\t\t\t\tcmd.run(&config, SUBSTRATE_REFERENCE_HARDWARE.clone())\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\tSome(Subcommand::TryRuntime) => Err(try_runtime_cli::DEPRECATION_NOTICE.into()),\n\t\tSome(Subcommand::ChainInfo(cmd)) => {\n\t\t\tlet runner = cli.create_runner(cmd)?;\n\t\t\trunner.sync_run(|config| cmd.run::<Block>(&config))\n\t\t},\n\t\tNone => {\n\t\t\tlet runner = cli.create_runner(&cli.run)?;\n\t\t\trunner.run_node_until_exit(|config| async move {\n\t\t\t\tservice::new_full(config).map_err(sc_cli::Error::Service)\n\t\t\t})\n\t\t},\n\t}\n}"